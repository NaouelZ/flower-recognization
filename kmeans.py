# -*- coding: utf-8 -*-
"""KMeans.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HzZ0dKDaiiVUjIrLWBu7BRLpGftb9hJA

#Download Dataset
"""

!gdown --id 1sQEIPh3bdKQ_1J3g0Z8CRqD6uU7v746l

!unzip dataset.zip

import pathlib
data_dir = pathlib.Path("./flowers")
image_count = len(list(data_dir.glob('*/*.jpg')))
print(image_count)

"""#Load dataset"""

from PIL import Image
import numpy as np
import os

dataset = []
count = 0
for label in os.listdir("./flowers/"):
  for filename in os.listdir(os.path.join("./flowers/",label)):
    count = count + 1
    print(str(count) + " ---loading " + filename)
    image = Image.open(os.path.join("./flowers/",label,filename))
    image.load()
    image = np.asarray(image, dtype="float32" )
    dataset.append((image, label))

import random
print(random.sample(dataset, 10))

import random
random.shuffle(dataset)

"""#Display dataset"""

import matplotlib.pyplot as plt
fig, axs = plt.subplots(3, 3, figsize = (12, 12))
plt.gray()

for i, ax in enumerate(axs.flat):
  ax.imshow(dataset[i][0].astype("int32"))
  ax.axis('off')
  ax.set_title(dataset[i][1])
plt.show()

"""#Preprocessing

##Resizing
"""

image_size = (32, 32)

import cv2
resized = []
for d in dataset:
  resized.append((cv2.resize(d[0], image_size), d[1]))

dataset = resized

"""##Reshape"""

images = np.asarray([d[0] for d in dataset])
print(images.shape)

images = images.reshape(len(images), -1)
print(images.shape)

"""##Normalization"""

images = images.astype(np.float32) / 255.

"""#K-Means Clustering"""

from sklearn.cluster import MiniBatchKMeans
number_clusters = 5
kmeans = MiniBatchKMeans(n_clusters=number_clusters)
kmeans.fit(images)

kmeans.labels_

"""##Map clusters to classes"""

def map_clusters_classes(kmeans, classes):
  
  mapping = {}
  
  for i in range(kmeans.n_clusters):
    
    cluster_indices = np.where(kmeans.labels_ == i)
    if len(cluster_indices[0]) == 0:
      continue
    
    cluster_classes = classes[cluster_indices[0]]
    
    counts = np.bincount(cluster_classes)
    mapping[i] = np.argmax(counts)
        
  return mapping

def inference(kmeans, images, classes):
  mapping = map_clusters_classes(kmeans, classes)
  clusters = kmeans.predict(images)
  predicted_classes = np.zeros(len(clusters)).astype(np.uint8)
  for i in range(len(clusters)):
    predicted_classes[i] = mapping[clusters[i]]
  return predicted_classes

labels_classes_mapping = {"daisy":0,"dandelion":1,"rose":2,"sunflower":3,"tulip":4}
classes = [labels_classes_mapping[d[1]] for d in dataset]
classes = np.asarray(classes)
predicted_classes = inference(kmeans, images, classes)
print(predicted_classes[:20])
print(classes[:20])

"""#Evaluation"""

from sklearn.metrics import accuracy_score
acc = accuracy_score(classes, predicted_classes)
print('Accuracy: {}\n'.format(acc))

number_clusters = [5, 10, 16, 36, 64, 144, 256, 1024, 2048, 4098]
acc_list = []

for n_clusters in number_clusters:
  estimator = MiniBatchKMeans(n_clusters=n_clusters)
  estimator.fit(images)
    
  predicted_classes = inference(estimator, images, classes)
  
  acc = accuracy_score(classes, predicted_classes)
  acc_list.append(acc)
  print('Accuracy: {}\n'.format(acc))

fig, ax = plt.subplots(1, 1, figsize=(10, 10))
ax.plot(number_clusters, acc_list, label='accuracy', marker='^')
ax.legend(loc='best')
ax.grid('on')
ax.set_title('Accuracy per each cluster number')
plt.show()